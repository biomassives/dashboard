{"name":"Team Dashboard","tagline":"Visualize your team's metrics all in one place.","body":"Team Dashboard lets you visualize your team's metrics all in one place (see [Screenshot](https://github.com/fdietz/team_dashboard/raw/master/gh-pages/screenshot.png)). It is build to be shown on a big screen in your team's space.\r\n\r\n[Heroku hosted Demo](http://team-dashboard.herokuapp.com/)\r\n\r\nIt has built-in support for [Graphite](http://graphite.wikidot.com/) and makes it really easy to add more input sources.\r\n\r\nIt is implemented as a Rails app and uses MySQL to store your custom dashboards configuration.\r\n\r\nSupport via [Team Dashboard Google Group](https://groups.google.com/forum/#!forum/team_dashboard)\r\n\r\nThanks go to Martin Tschischauskas and Marno Krahmer who worked with me on the first iteration which was build as part of a [XING](http://www.xing.com) Hackathon Project.\r\n\r\n## Getting Started\r\n\r\nClone the repository:\r\n\r\n    git clone git://github.com/fdietz/team_dashboard.git\r\n\r\nRun bundler:\r\n\r\n    bundle install\r\n\r\nCreate a database.yml from the example config:\r\n\r\n    cp config/database.example.yml config/database.yml\r\n\r\nCreate the database and run migrations:\r\n\r\n    rake db:create && rake db:migrate\r\n\r\nThere is an initial \"Demo\" source and sample dashboards provided. Generate these via:\r\n\r\n    rake populate\r\n\r\nStart the Rails server:\r\n\r\n    rails s\r\n\r\n## Configuration\r\n\r\nYou have to configure the MySQL database in config/database.yml.\r\n\r\nGraphite is the first input source Team Dashboard supports. Use the environment variable GRAPHITE_URL or change the rails configuration (see application.rb and environment specific files) directly.\r\n\r\n    GRAPHITE_URL=http://mygraphiteserver\r\n\r\nFor example:\r\n\r\n    GRAPHITE_URL=http://localhost:8080 rails s\r\n\r\n# Dashboard Widgets\r\n\r\nA dashboard in Team Dashboard consists of multiple Widgets, which request data from a data source via AJAX request.\r\n\r\nAll widgets have a name, time interval in which to update themselves and a data source as a common configuration.\r\n\r\n## Available Widgets\r\n\r\n### Graph Widget\r\nThe graph widget shows a time series line graph (using rickshaw.js internally). Use it to show number of visits on your web page or number of currently online users and follow-up on trends.\r\n\r\nIt currently supports a Demo data source, [Graphite](http://graphite.wikidot.com/) and the http proxy source.\r\n\r\n#### Configuration\r\n<table>\r\n  <tr>\r\n    <th>Name</th>\r\n    <th>Documentation</th>\r\n  </tr>\r\n  <tr>\r\n    <td>Date Range/Period</td>\r\n    <td>Select a date range of for example \"Last 3 hours\"</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Size</td>\r\n    <td>Number of Columns (Possible Values: 1, 2 or 3)</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Graph Type</td>\r\n    <td>Either a line or stacked graph.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Data Source</td>\r\n    <td>Only \"demo\" and \"graphite\" currently supported.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Targets</td>\r\n    <td>Comma-separated targets. Also supports wildcards (example: visits.server.*).</td>\r\n  </tr>\r\n</table>\r\n\r\n### Counter Widget\r\nShows the current value and the percentage of change of the last period. It is based on time series data and uses the same data sources as the graph widget. The widgets supports showing two values. Use it to for example show the current number of online users.\r\n\r\nIt currently supports a Demo data source, [Graphite](http://graphite.wikidot.com/) and the http proxy source.\r\n\r\n#### Configuration\r\n<table>\r\n  <tr>\r\n    <th>Name</th>\r\n    <th>Documentation</th>\r\n  </tr>\r\n  <tr>\r\n    <td>Date Range/Period</td>\r\n    <td>Select a date range of for example \"Last 3 hours\"</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Size</td>\r\n    <td>Number of Columns (Possible Values: 1, 2 or 3)</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Data Source</td>\r\n    <td>Only \"demo\" and \"graphite\" currently supported.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Targets</td>\r\n    <td>Comma-separated targets. Also supports wildcards (example: visits.server.*).</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Aggregate Function</td>\r\n    <td>The values of the selected period are aggregated using selected function. Supports sum, average and delta.</td>\r\n  </tr>\r\n</table>\r\n\r\n### Number Widget\r\nShows the current integer value provided by the data source and a label. The widget supports up to three values. Use it to show for the example the number of errors on specific system.\r\n\r\nIt currently supports a demo data source and a http proxy data source.\r\n\r\n#### Configuration\r\n<table>\r\n  <tr>\r\n    <th>Name</th>\r\n    <th>Documentation</th>\r\n  </tr>\r\n  <tr>\r\n    <td>Date Range/Period</td>\r\n    <td>Select a date range of for example \"Last 3 hours\"</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Label</td>\r\n    <td>Label for this value</td>\r\n  </tr>\r\n  <tr>\r\n    <td>HTTP Proxy URL</td>\r\n    <td>HTTP URL should return a JSON structure as described below</td>\r\n  </tr>\r\n  <tr>\r\n</table>\r\n\r\n### Boolean Widget\r\nShows the current boolean value provided by the data source and an label. The widget supports up to three values. Use it to show for example the success of a Jenkins build.\r\n\r\nIt currently supports a demo data source and a http proxy data source.\r\n\r\n#### Configuration\r\n<table>\r\n  <tr>\r\n    <th>Name</th>\r\n    <th>Documentation</th>\r\n  </tr>\r\n  <tr>\r\n    <td>Date Range/Period</td>\r\n    <td>Select a date range of for example \"Last 3 hours\"</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Label</td>\r\n    <td>Label for this value</td>\r\n  </tr>\r\n  <tr>\r\n    <td>HTTP Proxy URL</td>\r\n    <td>HTTP URL should return a JSON structure as described below</td>\r\n  </tr>\r\n  <tr>\r\n</table>\r\n\r\n## Data Sources\r\n\r\n### Datapoints\r\nThe datapoints source supports data for rendering graphs and aggregated values. Following a minimal implementation.\r\n\r\n    class Example < Sources::Datapoints::Base\r\n      def get(targets, from, to, options = {})\r\n        result = []\r\n        targets.each do |target|\r\n          # retrieve the actual data here\r\n          result << { 'target' => \"demo.example1\", 'datapoints' => [[1, 123456], [7, 123466]] }\r\n        end\r\n        result\r\n      end\r\n    end\r\n\r\nNote the datapoints array consists of pairs of number values (y-value and timestamp for the x-value of the graph). This is similar to how Graphite or Ganglia structure their json data for graph data.\r\n\r\n### Number\r\nThe number data source supports a single integer value and an optional label.\r\n\r\n    class Example < Sources::Number::Base\r\n      def get(options = {})\r\n        # retrieve actual data here\r\n        { :value => 115, :label => \"example label\" }\r\n      end\r\n    end\r\n\r\n### Boolean\r\nThe boolean data source supports a single boolean value and an optional label.\r\n\r\n    class Example < Sources::Boolean::Base\r\n      def get(options = {})\r\n        # retrieve actual data here\r\n        { :value => true, :label => \"example label\" }\r\n      end\r\n    end\r\n\r\n## Create your own Data Source\r\n\r\nCreate a data source ruby file under app/models/sources. As long as it extends from the specific base class (for example Sources::Boolean::Base) it will be automatically available.\r\n\r\n## HTTP Proxy Source\r\nAs described above you can easily add your own data source implementions. On the other hand you might prefer to offer a service on your server instead. The HTTP proxy source requests data on the server side, the Rails app being the \"proxy\" of the web app. The JSON format for the specific sources is described below.\r\n\r\n### Datapoints\r\nThe datapoints source supports data for rendering graphs and aggregated values\r\n\r\n    [\r\n      {\r\n        \"target\" : \"demo.example\",\r\n        \"datapoints\" : [\r\n          [1,123456], [7,23466]\r\n        ]\r\n      },\r\n      {\r\n        \"target\" : \"demo.example2\",\r\n        \"datapoints\" : [\r\n          [-6,123456], [8,23466]\r\n        ]\r\n      }\r\n    ]\r\n\r\n### Number\r\nThe number data source supports a single integer value and an optional label.\r\n\r\n    {\r\n      \"value\" : 8,\r\n      \"label\" : \"This is an example label\"\r\n    }\r\n\r\n### Boolean\r\nThe boolean data source supports a single boolean value and an optional label.\r\n\r\n    {\r\n      \"value\" : true,\r\n      \"label\" : \"This is an example label\"\r\n    }\r\n\r\n## The MIT License\r\n\r\nCopyright (c) 2012 Frederik Dietz\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}